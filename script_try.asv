IC_Choice= IC_Choice(:, 1:5);
IC_offer = IC_offer(:, 1:5);
IC_reward = IC_reward(:, 1:5);
IC_pc = IC_pc(1:5,:);
IC_pc_rt = IC_pc_rt(1:5,:);
IC_RT = IC_RT(:,1:5);
ID = ID(1:5,:);

%% data reformat 
clear
indir = 'C:\Users\fuq01\Documents\GitHub\Sinai-UG-EM-FIT\example_data';
infile_pre = 'em_pre_data.csv';
T_pre = readtable(fullfile(indir, infile_pre));
infile_post = 'em_post_data.csv';
T_post = readtable(fullfile(indir, infile_post));

sub = unique(T_pre.participant);
for i = 1:length(sub)
    keepStruct_pre = struct();
    keepStruct_pre.offer = T_pre.offer(T_pre.participant == sub(i),:);
    keepStruct.choice = T_pre.choice_b(T_pre.participant == sub(i), :);
    pre_beh(:,i) = {keepStruct};
end

for i = 1:length(sub)
    keepStruct_post = struct();
    keepStruct_post.offer = T_post.offer(T_post.participant == sub(i),:);
    keepStruct_post.choice = T_post.choice_b(T_post.participant == sub(i), :);
    post_beh(:,i) = {keepkeepStruct_postStruct};
end

% post_stim session 
pre_struct = struct();
pre_struct.beh = pre_beh;
pre_struct.expname = 'pre_stim';
pre_struct.ID = num2str(sub);
pre_struct.em = {};




% NC condition
BED_NC = struct();
BED_NC.beh = NC_beh_bed;
BED_NC.expname = 'BED_NC';
BED_NC.ID = possIDs_bed;
BED_NC.em = {};

BEDHC_NC = struct();
BEDHC_NC.beh = NC_beh_bedhc;
BEDHC_NC.expname = 'BEDHC_NC';
BEDHC_NC.ID = possIDs_hc_bed;
BEDHC_NC.em = {};

% Put into into the s structure
s = struct();
s.BED_NC = BED_NC;
s.BEDHC_NC = BEDHC_NC;


%%
save(fullfile(indir, 'DATA_ED_Round1_May23_2023.mat'),'s');S
